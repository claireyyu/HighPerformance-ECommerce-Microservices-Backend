version: '3.8'

services:
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - API_GATEWAY_PORT=8080
      - API_GATEWAY_HOST=0.0.0.0
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=8081
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=8082
    depends_on:
      - product-service
      - order-service

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - PRODUCT_SERVICE_PORT=8081
      - PRODUCT_SERVICE_HOST=0.0.0.0
      - PRODUCT_DB_HOST=mysql
      - PRODUCT_DB_PORT=3306
      - PRODUCT_DB_USER=product_user
      - PRODUCT_DB_PASSWORD=product_password
      - PRODUCT_DB_NAME=product_db
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_PRODUCT_TOPIC=product-events
    depends_on:
      - mysql
      - kafka

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - ORDER_SERVICE_PORT=8082
      - ORDER_SERVICE_HOST=0.0.0.0
      - ORDER_DB_HOST=mysql
      - ORDER_DB_PORT=3306
      - ORDER_DB_USER=order_user
      - ORDER_DB_PASSWORD=order_password
      - ORDER_DB_NAME=order_db
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_ORDER_TOPIC=order-events
      - KAFKA_PRODUCT_TOPIC=product-events
      - PRODUCT_SERVICE_URL=http://product-service:8081
    depends_on:
      - mysql
      - kafka
      - product-service

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=product_db
      - MYSQL_USER=product_user
      - MYSQL_PASSWORD=product_password
      - MYSQL_MULTIPLE_DATABASES=product_db,order_db
    volumes:
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8083:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper

  influxdb:
    image: influxdb:1.8
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_HTTP_AUTH_ENABLED=false
    volumes:
      - influxdb-data:/var/lib/influxdb

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - influxdb

volumes:
  influxdb-data:
  grafana-data: 